#! /bin/bash
#v 1.3

source "$(dirname "$(readlink -f "$0")")"/settings.txt

function outputlog {
	echo "$(date '+%d.%m.%Y %H:%M:%S')" : "$@" >> "${autoeditlog}"
}

function appendfile {
	autoeditparams=""
	clearTitles
	titlename="${titlename// /_}"
	titlename="${titlename//__/_}"
	episode="${episode// /_}"
	episode="${episode//__/_}"
	if [ $comskip -eq 1 ]; then autoeditparams="${autoeditparams} --comskip"; fi
	if [[ $titlename != "" ]]; then autoeditparams="${autoeditparams} --title ${titlename}"; fi
	if [[ $episode != "" ]]; then autoeditparams="${autoeditparams} --episode ${episode}"; fi
	if [ $transcode -eq 1 ]; then autoeditparams="${autoeditparams} --transcode ${decoder} ${encoder} ${bitrate}"; fi
	if [ $transcodeexternal -eq 1 ]; then autoeditparams="${autoeditparams} --transcodeexternal ${txqueue}"; fi
	if [ $movefile -eq 1 ]; then autoeditparams="${autoeditparams} --rename"; fi
	if [[ $mode = "m" ]]; then autoeditparams="${autoeditparams} --movie"; fi
	if [[ $mode = "s" ]]; then autoeditparams="${autoeditparams} --series"; fi
	if [ $logging != "long" ]; then autoeditparams="${autoeditparams} --logging ${logging}"; fi
	if [[ $update -eq 1 ]]; then
		{
		autoeditparams="${autoeditparams} --update"
		for i in "${!KODI_ARRAY[@]}"; do
			autoeditparams="${autoeditparams} ${KODI_ARRAY[i]}"
		done
		}
	fi

	echo "${infile}" >> "${queuefile}"
	echo "${autoeditparams}" >> "${queuefile}"

	#Catch write errors
	if [ $? -eq 1 ]; then

		outputlog Unable to create file in "${outfolder}"! Missing permission?
		outputlog Aborting...
		abort=1
		return 1

	else
	
		if [[ "$logging" == "long" ]]; then
			outputlog Appending video file to queue.
		elif [[ "$logging" == "short" ]]; then
			outputlog Adding to queue.
		fi
		return 0

	fi
}

function readArguments {
	mode="s"
	logging="long"
	titlename=""
	episode=""
	comskip=0
	transcode=0
	transcodeexternal=0
	txqueue=""
	decoder=""
	encoder=""
	bitrate=""
	movefile=0
	update=0
	unset KODI_ARRAY
	unknown=0
	unknowncommand=""


	#Read parameters from array $QUEUE_ARRAY field by field
	for i in "${!QUEUE_ARRAY[@]}"; do

		case "${QUEUE_ARRAY[i]}" in

			-c | --comskip )		comskip=1
									;;

			-t | --title )			(( i++ ))
									titlename="${QUEUE_ARRAY[i]}"
									;;

			-e | --episode )		(( i++ ))
									episode="${QUEUE_ARRAY[i]}"
									;;

			-tc | --transcode )		transcode=1
									(( i++ ))
									decoder="${QUEUE_ARRAY[i]}"
									(( i++ ))
									encoder="${QUEUE_ARRAY[i]}"
									(( i++ ))
									bitrate="${QUEUE_ARRAY[i]}"
									;;

			-tx | --transcodeexternal )		transcodeexternal=1
									(( i++ ))
									txqueue="${QUEUE_ARRAY[i]}"
									;;

			-m | --movie )			mode="m"
									;;

			-s | --series )			mode="s"
									;;

			-r | --rename )			movefile=1
									;;

			-l | --logging )		(( i++ ))
									logging="${QUEUE_ARRAY[i]}"
									;;

			-u | --update )			update=1
									(( i++ ))
									j=0
									while [[ ! "${QUEUE_ARRAY[i]}" == "-"* ]] && [[ ! "${QUEUE_ARRAY[i]}" == "" ]]; do
										KODI_ARRAY[j]="${QUEUE_ARRAY[i]}"
										(( i++ ))
										(( j++ ))
									done
									;;

			* )                     unknown=1
									unknowncommand="${QUEUE_ARRAY[i]}"
		esac

		if [[ $transcode -eq 1 ]] && [[ "${decoder}" == "" || "${encoder}" == "" || "${bitrate}" == "" ]]; then
		
			outputlog Error reading parameters for queued files. Settings for transcoding are incomplete.
			outputlog Aborting...
			exit

		fi

	done

}

function clearTitles {
	##Some stations do not use the correct series titles. This messes up filebot. Here you can add the skewed names.
	#Specify all individual non working series. Syntax format is:
	#titlename="${titlename//name to replace case sensitive/new name}"
	#E.g. titlename="${titlename//Star Trek - Das nächste Jahrhundert/Raumschiff Enterprise Das nachste Jahrhundert}"
	titlename="${titlename//_/ }"
	titlename="${titlename//Star Trek - Das nächste Jahrhundert/Raumschiff Enterprise Das nachste Jahrhundert}"
	titlename="${titlename//Star Trek - Deep Space Nine/Star Trek - Deep Space Nine}"
	titlename="${titlename//Grey\'s Anatomy - Die jungen Ärzte/Greys Anatomy}"
	titlename="${titlename//Criminal_Intent - Verbrechen im Visier - /Criminal Intent - }"
	titlename="${titlename//Fringe - Grenzfälle des FBI/Fringe}"

	##Some stations have the bad habbit to append the genre description after the episode instead of adequately using the correct fields in metadata.
	##The following cleans this up – as good as possible...
	episode="${episode//_/ }"
	episode="$(echo "${episode}" 2>&1 | perl -pe 's/,[A-Za-z ]*?[0-9][0-9][0-9][0-9]//g')"
	episode="$(echo "${episode}" 2>&1 | perl -pe 's/ Sitcom$//g')"
	episode="$(echo "${episode}" 2>&1 | perl -pe 's/ Comedy$//g')"
	episode="$(echo "${episode}" 2>&1 | perl -pe 's/ Science-Fiction-Serie$//g')"
	episode="$(echo "${episode}" 2>&1 | perl -pe 's/ Science-Fiction$//g')"
	episode="$(echo "${episode}" 2>&1 | perl -pe 's/ Crime-Serie$//g')"
	episode="$(echo "${episode}" 2>&1 | perl -pe 's/ Krimi$//g')"
	episode="$(echo "${episode}" 2>&1 | perl -pe 's/ Fantastisch$//g')"
	episode="$(echo "${episode}" 2>&1 | perl -pe 's/ Mystery$//g')"
	episode="$(echo "${episode}" 2>&1 | perl -pe 's/ Dramedy$//g')"
	episode="${episode%,}"
}

function processfile {
	#Extract title and episode info from metadata
	if [[ "${titlename}" == "" ]]; then

		titlename=$(ffmpeg -i "${RawFolder}/temp.${extension}" 2>&1 | grep " title  " | head -1 | cut -d":" -f2- | cut -c 2-)

	fi
	if [[ "${episode}" == "" ]]; then

		episode=$(ffmpeg -i "${RawFolder}/temp.${extension}" 2>&1 | grep "SUMMARY " | cut -d":" -f2- | cut -c 2- | cut -d" " -f-6 | perl -pe 's/,[A-Za-z ]*?[0-9][0-9][0-9][0-9]//g')
		#episode="${episode// /_}"


	fi

	clearTitles

	#Generate correct file name required for filebot or manual sorting.
	if [ $mode = "s" ]; then

		outfile="${titlename} - ${episode}"

	else

		outfile="${titlename}"

	fi

	#Remove non-word characters from file name
	outfile="${outfile//ä/a}"
	outfile="${outfile//ö/o}"
	outfile="${outfile//ü/u}"
	outfile="${outfile//Ä/A}"
	outfile="${outfile//Ö/O}"
	outfile="${outfile//Ü/U}"
	outfile="${outfile//ß/ss}"
	outfile="${outfile//:/}"
	outfile=$(echo "$outfile" | sed -e 's/[^A-Za-z0-9,._ -]/_/g')

	#Catch if target file already exists
	while [ -f "${RawFolder}/${outfile}.${extension}" ]; do
		outfile="$outfile"_1
	done

	#Check if creating edl and launch comskip
	if [ $comskip -eq 1 ]; then

		comskip "${RawFolder}/temp.${extension}" -q --ini="$comskipINI"

	fi

	#Check if transcoding and launch ffmpeg
	if [[ $transcode -eq 1 ]]; then

		#Check if all parameters are set
		if [[ -z $decoder || -z $encoder || -z $bitrate ]]; then

			outputlog Error while transcoding. The arguments decoder, encoder and bitrate all have to be set.
			outputlog ffmpeg was not started.
			outputlog Aborting...
			outputlog
			exit

		else

			#Delete any left over temp file
			rm "${RawFolder}/temp_transcode.${extension}" 2> /dev/null
			ffmpeg -c:v "${decoder}" -i "${RawFolder}/temp.${extension}" -c:v "${encoder}" -c:a copy -b:v "${bitrate}" "${RawFolder}/temp_transcode.${extension}"
			if [ $? -eq 1 ]; then

				outputlog Error while transcoding. The original video file is kept.
				outputlog Aborting...
				outputlog
				exit

			else

				if [[ "$logging" == "long" ]]; then
					outputlog Transcoding completed successfully. The original file will be replaced.
				elif [[ "$logging" == "short" ]]; then
					outputlog Transcoding completed.
				fi
				rm "${RawFolder}/temp.${extension}" 2> /dev/null
				mv "${RawFolder}/temp_transcode.${extension}" "${RawFolder}/temp.${extension}" 2> /dev/null

			fi

		fi

	fi

	#Rename temporary file(s) to matching title and episode
	mv -n "${RawFolder}/temp.${extension}" "${RawFolder}/${outfile}.${extension}"
	if [ $comskip -eq 1 ]; then

		mv -n "${RawFolder}/temp.edl" "${RawFolder}/${outfile}.edl"

	fi

	#Check if renaming and launch filebot
	if [[ $movefile -eq 1 ]]; then

		if [[ $mode == "m" ]]; then

			#rename using filebot movie mode
			filebot --output "${outfolder}" --lang "${language}" --encoding Windows-1252 --action test --conflict fail --db TheMovieDB --q "${titlename}" -rename "${RawFolder}/${outfile}.${extension}" "${RawFolder}/${outfile}.edl" -non-strict -no-xattr --log fine --log-file "/tmp/autoedit_temp.txt" --format "${nameFormatMovie}"

		else

			#rename using filebot series mode
			filebot --output "${outfolder}" --lang "${language}" --encoding Windows-1252 --action test --conflict fail --db TheTVDB --q "${titlename}" -rename "${RawFolder}/${outfile}.${extension}" "${RawFolder}/${outfile}.edl" -non-strict -no-xattr --log fine --log-file "/tmp/autoedit_temp.txt" --format "${nameFormatSeries}"

		fi
	
		#If not found in Database move to error directory
		if [[ $(grep -i "Failed to fetch" "/tmp/autoedit_temp.txt") != "" ]]; then

			#Create directory if not existant
			if [ ! -d "${RawFolder}/Error-NotInDatabase" ]; then
				mkdir "${RawFolder}/Error-NotInDatabase"
			fi
			target="${RawFolder}/Error-NotInDatabase/${outfile}.${extension}"
			mv -n "${RawFolder}/${outfile}.${extension}" "${RawFolder}/Error-NotInDatabase/${outfile}.${extension}"
			if [ -f "${RawFolder}/${outfile}.edl" ]; then
				mv -n "${RawFolder}/${outfile}.edl" "${RawFolder}/Error-NotInDatabase/${outfile}.edl"
			fi
			outputlog Failed to rename file: Not found in online database
				
		#If video or edl present move to duplicates directory
		elif [[ $(grep -i "already exists" "/tmp/autoedit_temp.txt") != "" ]]; then

			#Create directory if not existant
			if [ ! -d "${RawFolder}/Error-Duplicates" ]; then

				mkdir "${RawFolder}/Error-Duplicates"

			fi
			target=$(grep -i "Failed to process" "/tmp/autoedit_temp.txt")
			newfile="${outfile}"
			if [[ "${target}" != "" ]]; then

				#Cut line containing target path from log file
				target="$(echo $target | cut -d" " -f3- | cut -d"[" -f3 | cut -d"]" -f1)"

				#Cut full path from target path
				newfile="${target%/*}"

				#Cut only subdirectory from path
				newfile="${newfile##*/}"

				#Add filename to path
				newfile="${newfile} - ${target##*/}"

				#Remove extension
				newfile="${newfile%.*}"

			fi

			#Catch if file already in duplicates directory
			while [ -f "${RawFolder}/Error-Duplicates/${newfile}.${extension}" ]; do

				newfile="$newfile"_1

			done
			target="${RawFolder}/Error-Duplicates/${newfile}.${extension}"
			mv -n "${RawFolder}/${outfile}.${extension}" "${RawFolder}/Error-Duplicates/${newfile}.${extension}"
			if [ -f "${RawFolder}/${outfile}.edl" ]; then

				mv -n "${RawFolder}/${outfile}.edl" "${RawFolder}/Error-Duplicates/${newfile}.edl"

			fi
			if [[ "$logging" == "long" ]]; then
				outputlog Video was already in the library. Files were moved to "${RawFolder}/Error-Duplicates/${newfile}.${extension}"
			elif [[ "$logging" == "short" ]]; then
				outputlog Duplicate! Files moved to "${RawFolder}/Error-Duplicates/${newfile}.${extension}"
			fi
		
		#If no error move file to new directory
		elif [[ $(grep -i "Processed " "/tmp/autoedit_temp.txt") != "" ]] && [[ $(grep -i "Failure" "/tmp/autoedit_temp.txt") == "" ]]; then

			target=$(grep -i "\[TEST\] from.*${extension}\]$" "/tmp/autoedit_temp.txt")
			target="$(echo $target | cut -d" " -f3- | cut -d"[" -f3 | cut -d"]" -f1)"
			if [ ! -d "${target%/*}" ]; then

				mkdir "${target%/*}"

			fi
			mv -n "${RawFolder}/${outfile}.${extension}" "${target}"
			if [ -f "${RawFolder}/${outfile}.edl" ]; then

				mv -n "${RawFolder}/${outfile}.edl" "${target%\.*}.edl"

			fi
			if [[ "$logging" == "long" || "$logging" == "short" ]]; then
				outputlog Files moved to "${target}"
			fi
			RawFolder="${target%/*}"
			outfile=$(basename "${target}" ."${extension}")

			#Check if external transcoding and add to queue
			if [[ $transcodeexternal -eq 1 ]]; then

				echo "${RawFolder}/${outfile}.${extension}" >> "${txqueue}"
				if [[ "$logging" == "long" || "$logging" == "short" ]]; then
					outputlog Added "${RawFolder}/${outfile}.${extension}" for external transcoding.
				fi

			fi

		#Unexpected error
		else
			outputlog Unexpected error while renaming. Aborting!
		fi
		
		rm -f /tmp/autoedit_temp.txt

	elif [[ $transcodeexternal -eq 1 ]]; then

		echo "${RawFolder}/${outfile}.${extension}" >> "${txqueue}"
		if [[ "$logging" == "long" || "$logging" == "short" ]]; then

			outputlog Added "${RawFolder}/${outfile}.${extension}" for external transcoding.

		fi

	fi
}


#Init variables
help=0
abort=0
wait=0
infile=""
logging="long"
comskip=0
transcode=0
transcodeexternal=0
txqueue=""
decoder=""
encoder=""
bitrate=""
movefile=0
update=0
unset KODI_ARRAY
forcerun=0
unknown=0
unknowncommand=""


#Read parameters from command line
while [ "$1" != "" ]; do

    case $1 in

		-i | --input )			shift
								infile=$1
								;;

		-c | --comskip )		comskip=1
								;;

		-t | --title )			shift
								titlename=$1
								;;

		-e | --episode )		shift
								episode=$1
								;;

		-tc | --transcode )		transcode=1
								shift
								decoder="$1"
								shift
								encoder="$1"
								shift
								bitrate="$1"
								;;

		-tx | --transcodeexternal )		transcodeexternal=1
								shift
								txqueue="$1"
								;;

		-m | --movie )			mode="m"
								;;

		-s | --series )			mode="s"
								;;

		-r | --rename )			movefile=1
								;;

		-w | --wait )			wait=1
								;;

		-f | --force )			forcerun=1
								;;

		-h | --help )			help=1
								abort=1
								;;

		-l | --logging )		shift
								logging="$1"
								;;

		-u | --update )			update=1
								j=0
								while [[ ! "$2" == "-"* ]] && [[ ! "$2" == "" ]]; do
									KODI_ARRAY[j]="$2"
									shift
									(( j++ ))
								done
								;;

		* )                     help=1
								abort=1
								unknown=1
								unknowncommand=$1
    esac
    shift
done

	if [[ $transcode -eq 1 ]] && [[ "${decoder}" == "" || "${encoder}" == "" || "${bitrate}" == "" ]]; then

		help=1
		abort=1
		unknown=1
		unknowncommand="-t ${decoder} ${encoder} ${bitrate}"

	fi

	if [[ $transcode -eq 1 ]] && [[ transcodeexternal -eq 1 ]]; then

		help=1
		abort=1
		unknown=1
		unknowncommand="ERROR: Internal and external transcoding may not be used at the same time"

	fi

	if [[ "$logging" != "long" ]] && [[ "$logging" != "short" ]] && [[ "$logging" != "none" ]] && [[ "$logging" != "off" ]]; then

		help=1
		abort=1
		unknown=1
		unknowncommand="ERROR: Parameter for --logging unknown"

	fi

#######Prepare queue
if [ "$abort" -eq 0 ]; then

	#Test if video file was set
	if [[ "$infile" != "" ]]; then

		outputlog New video recorded. The file name is "$infile" .

		#Test if queue file exists
		if [ -f "${queuefile}" ]; then

			#Test if queue file contains any video files (should never exist and be empty)
			QUEUE=""
			read -r QUEUE < "${queuefile}"
			if [[ "$QUEUE" != "" ]]; then

				#Test if queue file contains the infile (and do not append duplicates)
				while read -r QUEUE || [[ -n "$QUEUE" ]]; do
					if [[ "$QUEUE" == "${infile}" ]]; then FOUND=1; fi
				done < "${queuefile}"
				if [[ $FOUND -eq 1 ]]; then

					#If video file already queued just quit.
					if [[ "$logging" == "long" ]]; then
						outputlog Video file already queued, not adding duplicates.
					elif [[ "$logging" == "short" ]]; then
						outputlog Not adding duplicates.
					fi

				else

					#If video file not queued append to queue.
					if [[ "$logging" == "long" ]]; then
						outputlog Some videos are already waiting to be processed.
					elif [[ "$logging" == "short" ]]; then
						outputlog Queueing.
					fi
					appendfile

				fi

			else

				#If queue is empty treat as if it wasn't present in the first place
				appendfile

			fi

		else

			appendfile

		fi

	fi


	#Test if an error occurred
	if [ "$abort" -eq 0 ]; then

		#Test if set to run
		if [ "$wait" -eq 0 ]; then

			outputlog
			outputlog Start processing...
			if [ -f "${queuefile}" ]; then

				{ read -r QUEUE ; read -r -a QUEUE_ARRAY ; } < "${queuefile}"
				if [[ "$QUEUE" != "" ]]; then

					if [[ "$logging" == "long" ]]; then
						outputlog Fetched next file from queue. Processing "$QUEUE".
					elif [[ "$logging" == "short" ]]; then
						outputlog Next file: "$QUEUE".
					fi
					infile="$QUEUE"

					#Extract filename and path from argument
					extension="${infile##*.}"
					RawFolder="${infile%/*}"

					#Parse Arguments from 2nd line
					readArguments

				else

					if [[ "$logging" == "long" || "$logging" == "short" ]]; then
						outputlog No file in queue.
					fi
					exit

				fi

			else

				if [[ "$logging" == "long" || "$logging" == "short" ]]; then
					outputlog No file in queue.
				fi
				exit


			fi

			#Does lockfile exist?
			if [ -f "${outfolder}"/autoedit.lockfile ]; then

				outputlog Previous run did not complete.

				#Test if parameter forcerun is set
				if [ $forcerun -eq 1 ]; then

					outputlog Trying to continue left over file...
					outputlog

					#Check if a temp file is left
					if [ -f "${RawFolder}/temp.${extension}" ]; then

						processfile

					else

						outputlog ERROR! Files from unfinished run were lost.
						outputlog Please fix "${queuefile}" manually and remove "${outfolder}"/autoedit.lockfile

					fi

				else

					outputlog Exiting!
					outputlog
					exit

				fi

			else

				#Check if a temp file is left
				if [ -f "${RawFolder}/temp.${extension}" ]; then

					outputlog ERROR! A file from unfinished run was found.
					outputlog Please check, if the file can be removed and fix "${queuefile}" manually.
					outputlog Aborting...
					outputlog
					exit

				else

					#Check if fetched file exists
					if [ -f "${infile}" ]; then

						#Move file to temporary name
						touch "${outfolder}"/autoedit.lockfile
						mv -n "${infile}" "${RawFolder}/temp.${extension}" 2> /dev/null
						if [ $? -eq 1 ]; then

							outputlog Cannot move video file to temporary place. Missing permission?
							outputlog Aborting...
							outputlog
							exit

						fi

						processfile

					else

						outputlog File does not exist. Skipping!

					fi

				fi

			fi

			#Remove current video file from queue
			rm "${outfolder}"/autoedit.lockfile
			sed -i -e "1,2d" "${queuefile}"
			QUEUE=""
			read -r QUEUE < "${queuefile}"
			if [[ "$QUEUE" != "" ]]; then

				if [[ "$logging" -eq "short" ]]; then

					eval bash '$0' --logging "short"

				else

					eval bash '$0'

				fi

			else

				rm "${queuefile}"
				
				#Update video library
				if [[ "$update" -eq 1 ]]; then
					#Clean library first
					## Removed for the time being – permanently erases library if remote sources are temporarily unavailable!
					##
					#for i in "${!KODI_ARRAY[@]}"; do
					#	curl --data-binary '{ "jsonrpc": "2.0", "method": "VideoLibrary.Clean"}' -H 'content-type: application/json;' http://"${KODI_ARRAY[i]}":8080/jsonrpc
					#done
				
					#Wait 5 minutes as Kodi does not respond when done and cannot clean and update the library at the same time
					#sleep 5m

					#Then update library
					for i in "${!KODI_ARRAY[@]}"; do
						curl --data-binary '{ "jsonrpc": "2.0", "method": "VideoLibrary.Scan"}' -H 'content-type: application/json;' http://"${KODI_ARRAY[i]}":8080/jsonrpc
						if [[ "$logging" == "long" || "$logging" == "short" ]]; then
							outputlog Updating Kodi video library for client "${KODI_ARRAY[i]}"
						fi
					done

				fi

				outputlog Complete!
				outputlog -------------------------------------------------
				outputlog

			fi

		fi

	fi

fi


#Show help if requested then quit
if [[ $help -eq 1 ]]
then

	if [[ $unknown -eq 1 ]]; then
		echo ERROR! Unknown parameter: "$unknowncommand"
	fi
	echo '

Usage: autoedit (options)
Examples:
    /usr/bin/autoedit -i /fullpath/videoFile -c -r
       -> Find commercials in videoFile and rename with Filebot.
          Run immediately or add to queue if already running in another instance.
  
    /usr/bin/autoedit -i /fullpath/videoFile -t mpeg2_mmal h264_omx 2000k -w
       -> Transcode videoFile from mpeg2 to h.264 with hardware de- and
          encoder on Raspberry Pi
          Do not run immediately, only add to queue.

    /usr/bin/autoedit
        -> Start queue if not running in another instance (and queue present).


Options:
 -h | --help     : Show help.

 -l | --logging  : Set logging mode to "long", "short", or "off".

 -i | --input FILE : File to process, requires full path.

 -t | --title MANUAL_TITLE:
                   Override title from metadata with MANUAL_TITLE.

 -e | --episode MANUAL_EPISODE:
                   Override episode name from metadata with MANUAL_EPISODE.

 -s | --series   : Series mode. Will read title and episode from metadata.
                   Use thetvdb.com if renaming with filebot.
				   (Default if nothing specified)

 -m | --movie    : Movie mode. Will only read the title without episode.
                   Use themoviedb.com if renaming with filebot.

 -c | --comskip  : Mark commercials for automatic skipping using Comskip.

 -tc | --transcode DECODER ENCODER BITRATE:
                   Transcode the video to a defined codec using ffmpeg.
                   The original file will be replaced. Requires valid
                   DECODER, ENCODER and BITRATE. Ffmpeg and the desired
                   codecs must be installed.
                   E.g. --transcode mpeg2video libx264 2000k

 -tx | --transcodeexternal QUEUE_FILE:
                   Add the processed video file with full path into QUEUE_FILE
				   for transcoding with an external program (and possibly
				   on another computer).

 -r | --rename	 : Rename the file to a Kodi compatible format using filebot.
                   Requires filebot to be installed.

 -u | --update LIST_OF_KODI_CLIENTS :
				   Will remotely update the video library for all listed clients.

 -w | --wait	 : Do not start processing immediately, just queue the video.

 -f | --forcerun : Force processing of queued videos. The whole queue
                   will be processed and the queue file will be removed
                   after the last video is finished.
                   Will also attempt to resume unfinished files from
                   previous runs.'

fi
